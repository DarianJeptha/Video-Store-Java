/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package VideoStoreServer;

import java.sql.*;
import javax.swing.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.util.regex.*;
import javax.xml.soap.SAAJMetaFactory;

/**
 *
 * @author DJ
 */
public class ServerGui extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ServerGui
     */
    public ServerGui() {
        initComponents();
        setTitle("Server");
    }
    
    ServerSocket serverSock;
    boolean listening;
    public Thread runner;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ServerPane = new javax.swing.JPanel();
        ServerLabel = new javax.swing.JLabel();
        UserNameTextField = new javax.swing.JTextField();
        ConnectionButton = new javax.swing.JButton();
        DiscconectionButton = new javax.swing.JButton();
        UserPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ServerLabel.setText("The Server :");

        UserNameTextField.setText("User Name");

        ConnectionButton.setText("Connect");
        ConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectionButtonActionPerformed(evt);
            }
        });

        DiscconectionButton.setText("Disconnect");
        DiscconectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscconectionButtonActionPerformed(evt);
            }
        });

        UserPasswordField.setText("jPasswordField1");

        javax.swing.GroupLayout ServerPaneLayout = new javax.swing.GroupLayout(ServerPane);
        ServerPane.setLayout(ServerPaneLayout);
        ServerPaneLayout.setHorizontalGroup(
            ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerPaneLayout.createSequentialGroup()
                .addGroup(ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServerPaneLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(ServerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServerPaneLayout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(ConnectionButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DiscconectionButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServerPaneLayout.createSequentialGroup()
                            .addGap(72, 72, 72)
                            .addGroup(ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(UserPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(UserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        ServerPaneLayout.setVerticalGroup(
            ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServerPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ServerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UserPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ServerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectionButton)
                    .addComponent(DiscconectionButton))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ServerPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ServerPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectionButtonActionPerformed
        try {
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore", "", "");
            Statement stat = con.createStatement();
            String query = new String(UserPasswordField.getPassword());
            ResultSet results = stat.executeQuery("SELECT * FROM Users "
                                                + "WHERE user_name = '" + UserNameTextField.getText() + "' AND password = '"
                                                + query + "'");
            if (!results.next()) {
                JOptionPane.showMessageDialog(null, "Incorrect password entered. Please try again.", 
                        "Incorrect Password", 0);
            } else {
                DiscconectionButton.setEnabled(true);
                ConnectionButton.setEnabled(false);
                try {
                    serverSock = new ServerSocket(6666);
                    listening = true;
                    JOptionPane.showMessageDialog(null, "Server started successfully", "Server started", 1);
                    ServerLabel.setText("The Server : is up and running");
                } catch (IOException e) {
                    System.out.println(e.toString());
                }
            }
            
            if (runner == null) {
                runner = new Thread(this);
                runner.start();
            }
            
            stat.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e, "Error Message", 0);
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e, "Error Message", 0);
        }
    }//GEN-LAST:event_ConnectionButtonActionPerformed

    private void DiscconectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscconectionButtonActionPerformed
        try {
            listening = false;
            serverSock.close();
            ConnectionButton.setEnabled(true);
            DiscconectionButton.setEnabled(false);
            JOptionPane.showMessageDialog(null,"The server has been stopped successfully." 
                                      ,"Server Status", 1);
            ServerLabel.setText("The Server : is down");
        } catch(IOException e) {
            System.out.println(e.toString());
        }
        DiscconectionButton.setEnabled(false);
    }//GEN-LAST:event_DiscconectionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void run() {
        while (listening) {
            try {
                new Session(serverSock.accept());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectionButton;
    private javax.swing.JButton DiscconectionButton;
    private javax.swing.JLabel ServerLabel;
    private javax.swing.JPanel ServerPane;
    private javax.swing.JTextField UserNameTextField;
    private javax.swing.JPasswordField UserPasswordField;
    // End of variables declaration//GEN-END:variables
}

/*
 * This class is used to connect multiple clients to the server. Each new
 * session implements this class.
 */
class Session implements Runnable {
    Socket soc;
    BufferedReader br;
    PrintWriter pw;
    Thread runner;

    public Session(Socket s) {
        soc = s;
        try {
            br = new BufferedReader(new InputStreamReader(soc.getInputStream()));
            pw = new PrintWriter(new BufferedOutputStream(soc.getOutputStream()), true);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e, "Error Message", 0);
        }
        
        if (runner == null) {
            runner = new Thread(this);
            runner.start();
        }
    }
        
    /**
     * The overwritten run method is used to carry out the multiple clients
     */
    public void run() {
        while (runner == Thread.currentThread()) {
            try {
                String input = br.readLine();
                if (input != null) {
                    String output = Protocol.processInput(input);
                    pw.println(output);
                    if (output.equals("Good Bye")) {
                        runner = null;
                        pw.close();
                        br.close();
                        soc.close();
                    }
                }
            } catch (IOException e) {
                System.out.println(e.toString());
            }
            
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {}
        }
    }
}

/**
 * This class contains all the methods for the connection between the client and
 * server
 */
class Protocol {

    /*
     * This method carries out various method for the client side depending on
     * the input sent to the method of the server
     */
    public static String processInput(String input) {
        String index = input.substring(0, input.indexOf("!"));
        String answer = "";
        /**
         * This part of the method searches for the movies in the database based
         * on the string which is sent to the server. It then returns the string
         * to the searcher to display the results
         */
        if (index.equals("1")) {
            try {
                String search;
                search = input.substring(input.indexOf("!") + 1, input.length());
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");
                Statement stat = con.createStatement();
                ResultSet resultSet = stat.executeQuery("SELECT Movies.movie_name, Genre.genre_name "
                        + "FROM Movies, Genre "
                        + "WHERE Movies.genre_id = Genre.genre_id "
                        + "AND Genre.genre_name = '"
                        + input.substring(input.indexOf("!") + 1, input.length())
                        + "'");

                String place1;
                String place2;

                while (resultSet.next()) {
                    answer = answer + resultSet.getString(1) + "!" + resultSet.getString(2) + "!";
                }

                if (answer.equals("")) {
                    answer = "0";
                }
                stat.close();
                con.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        /**
        * This part of the method searches for the movies in the database
        * depending on the genre name that was sent to the server.
        */
        } else if (index.equals("2")) {
            try {
                String search;
                search = input.substring(input.indexOf("!") + 1, input.length());
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");
                Statement stat = con.createStatement();
                ResultSet resultSet = stat.executeQuery("SELECT Movies.movie_name, Genre.genre_name "
                        + "FROM Movies, Genre "
                        + "WHERE Movies.genre_id = Genre.genre_id");

                String place1;
                String place2;
                while (resultSet.next()) {
                    place1 = resultSet.getString(1);
                    place2 = resultSet.getString(2);

                    if (Pattern.compile(".*" + search + ".*", Pattern.CASE_INSENSITIVE).matcher(place1).matches()) {
                        answer = answer + place1 + "!" + place2 + "!";
                    }
                }

                if (answer.equals("")) {
                    answer = "0";
                }
                stat.close();
                con.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        /**
        * This part of the method adds a new movie to the database using a
        * split string to add the movies new details to the database to be
        * saved
        */    
        } else if (index.equals("3")) {
            try {
                String[] addMovie = input.split("!");
                String movieName = addMovie[1];
                String movieGenre = addMovie[2];
                String movieDesc = addMovie[3];
                int lastIndex = 0;
                int rowsAdded;
                int genreInt = 0;

                boolean genreExists = false;
                boolean videoDuplicate = false;
                boolean canAdd = false;

                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");

                Statement ckGenre = con.createStatement();
                ResultSet genreList = ckGenre.executeQuery("SELECT genre_id, genre_name FROM Genre");
                while (genreList.next()) {
                    String g = genreList.getString("genre_name");
                    if (movieGenre.equals(g)) {
                        genreExists = true;
                        genreInt = genreList.getInt("genre_id");
                    }
                }
                genreList.close();

                Statement ckMovie = con.createStatement();
                ResultSet movieList = ckMovie.executeQuery("SELECT movie_id, movie_name FROM Movies");
                while (movieList.next()) {
                    String m = movieList.getString("movie_name");
                    lastIndex = ((movieList.getInt(1)) + 1);
                    if (movieName.equals(m)) {
                        videoDuplicate = true;
                    }
                }
                movieList.close();

                if ((genreExists) && (videoDuplicate == false)) {
                    canAdd = true;
                }

                if (canAdd) {
                    Statement stMovie = con.createStatement();
                    String movieAdd = "INSERT INTO Movies (movie_name, description, genre_id) "
                            + "VALUES ('" + movieName + "', '" + movieDesc + "', " + genreInt + ")";
                    rowsAdded = stMovie.executeUpdate(movieAdd);
                    stMovie.close();
                    answer = "0";
                } else if (videoDuplicate) {
                    answer = "1";
                } else {
                    answer = "2";
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        /**
        * This part of the method is used to delete a movie based on the
        * name of the movie that was sent from the client
        */
        } else if (index.equals("4")) {
            int rowRemoved;
            String movieName = input.substring(input.indexOf("!") + 1, input.length());
            try {
                boolean nameExists = false;
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");
                Statement stat = con.createStatement();
                ResultSet resultSet = stat.executeQuery("SELECT movie_id, movie_name FROM Movies");

                while (resultSet.next()) {
                    if (movieName.equals(resultSet.getString(2))) {
                        nameExists = true;
                    }
                }

                if (nameExists) {
                    String removeString = "DELETE FROM Movies WHERE movie_name = '" + movieName + "'";
                    rowRemoved = stat.executeUpdate(removeString);
                    answer = "0";
                } else {
                    answer = "1";
                }
                stat.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        /**
        * This part of the method is used to add a new genre to the
        * database depending on the name sent from the client of the new
        * genre
        */
        } else if (index.equals("5")) {
            System.out.println("1");
            String newGenre = input.substring(input.indexOf("!") + 1, input.length());
            try {
                int lastIndex = 0;
                int rowsAdded;
                boolean genreDup = false;
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");
                System.out.println("2");
                Statement stat = con.createStatement();
                System.out.println("3");
                ResultSet genreIndex = stat.executeQuery("SELECT genre_id, genre_name FROM Genre");
                System.out.println("4");
                while (genreIndex.next()) {
                    System.out.println("5");
                    lastIndex = ((genreIndex.getInt(1)) + 1);
                    if (newGenre.equals(genreIndex.getString(2))) {
                        genreDup = true;
                    }
                }

                if (genreDup) {
                    answer = "0";
                } else {
                    String genreString = "INSERT INTO Genre (genre_name) "
                            + "VALUES ('" + newGenre + "')";
                    rowsAdded = stat.executeUpdate(genreString);
                    answer = "1";
                    stat.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        /**
        * This part of the method is used to test the login name of the
        * admin user to that of the names in the admin table in the
        * database
        */
        } else if (index.equals("6")) {
            try {
                String[] checkPassword = input.split("!");
                String checkUser = checkPassword[1];
                String checkWord = checkPassword[2];
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection con = DriverManager.getConnection("jdbc:odbc:VideoStore");
                Statement stat = con.createStatement();
                ResultSet resultSet = stat.executeQuery("SELECT * FROM Users "
                        + "WHERE user_name = '" + checkUser + "' AND password = '"
                        + checkWord + "'");
                if (!resultSet.next()) {
                    answer = "0";
                }
                stat.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, e, "Error Message", 0);
            }
        }
        return answer;
    }
}