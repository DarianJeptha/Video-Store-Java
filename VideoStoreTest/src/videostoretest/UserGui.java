/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package videostoretest;

import java.net.*;
import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.util.regex.*;
import java.sql.*;
import sun.awt.windows.ThemeReader;

/**
 *
 * @author DJ
 */
public class UserGui extends javax.swing.JFrame {

    Socket userSocket = null;
    PrintWriter out = null;
    BufferedReader in = null;

    /** Creates new form UserGUI */
    public UserGui() {
        initComponents();
        setTitle("User GUI");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchPanel = new javax.swing.JPanel();
        MovieNameLabel = new javax.swing.JLabel();
        GenreLabel = new javax.swing.JLabel();
        MovieSearchButton = new javax.swing.JButton();
        GenreSearchButton = new javax.swing.JButton();
        MovieNameTextField = new javax.swing.JTextField();
        GenreTextField = new javax.swing.JTextField();
        SearchScrollPane = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        ConnectJButton = new javax.swing.JButton();
        DisconnectjButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        ClientMenuItem = new javax.swing.JMenuItem();
        AdminMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MovieNameLabel.setText("Movie Name:");

        GenreLabel.setText("Genre :");

        MovieSearchButton.setText("Search");
        MovieSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieSearchButtonActionPerformed(evt);
            }
        });

        GenreSearchButton.setText("Search");
        GenreSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenreSearchButtonActionPerformed(evt);
            }
        });

        MovieNameTextField.setEnabled(false);
        MovieNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MovieNameTextFieldActionPerformed(evt);
            }
        });

        GenreTextField.setEnabled(false);

        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Movie", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchScrollPane.setViewportView(SearchTable);
        SearchTable.getAccessibleContext().setAccessibleParent(SearchPanel);

        ConnectJButton.setText("Connect");
        ConnectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectJButtonActionPerformed(evt);
            }
        });

        DisconnectjButton.setText("Disconnect");
        DisconnectjButton.setEnabled(false);
        DisconnectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(MovieNameLabel)
                    .addComponent(GenreLabel))
                .addGap(18, 18, 18)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MovieNameTextField)
                    .addComponent(GenreTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MovieSearchButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(GenreSearchButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addComponent(ConnectJButton)
                        .addGap(18, 18, 18)
                        .addComponent(DisconnectjButton))
                    .addComponent(SearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MovieNameLabel)
                    .addComponent(MovieSearchButton)
                    .addComponent(MovieNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GenreLabel)
                    .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(GenreSearchButton)
                        .addComponent(GenreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(SearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConnectJButton)
                    .addComponent(DisconnectjButton))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        FileMenu.setText("File");

        ClientMenuItem.setText("Client View");
        ClientMenuItem.setEnabled(false);
        FileMenu.add(ClientMenuItem);

        AdminMenuItem.setText("Admin View");
        AdminMenuItem.setEnabled(false);
        AdminMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(AdminMenuItem);

        MenuBar.add(FileMenu);

        HelpMenu.setText("Help");

        HelpMenuItem.setText("Show Help");
        HelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpMenuItem);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SearchPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MovieNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MovieNameTextFieldActionPerformed
    
    /*
     * This method is used to search differnr genres within the database and all
     * the suitable movies it consists of. String arguments are takent from the 
     * text fields provided and sent to the server were they are approved and then
     * displayed inside the JTabel is the information provided is valid.
     */  
    private void GenreSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenreSearchButtonActionPerformed
        try {
            userSocket = new Socket("127.0.0.1", 6666);
            out = new PrintWriter(userSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader
                                        (userSocket.getInputStream()));

            String search = GenreTextField.getText();
            String movReturn;
            boolean argument;

            argument = Pattern.compile("[a-zA-z].*").matcher(search).matches();

            if (argument) {
                out.println("1!" + search);
                int x = 0;

                try {
                    movReturn = in.readLine();
                    if (movReturn.equals("0")) {
                        throw new noGenreException();
                    } else {
                        String columnNames[] = {"Movie", "Genre"};
                        String[] genreArray = movReturn.split("!");
                        Object rows[][] = new Object[(genreArray.length)][2];

                        for (int i = 0; i < genreArray.length; i++) {
                            if (i % 2 == 0) {
                                rows[x][0] = genreArray[i];
                            } else {
                                rows[x][1] = genreArray[i];
                            }
                            if (i % 2 != 0) {
                                x++;
                            }
                        }
                        SearchTable = new JTable(rows, columnNames);
                        SearchScrollPane.getViewport().add(SearchTable);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, e, "Error", 0);
                } catch (noGenreException e) {
                    JOptionPane.showMessageDialog
                            (null, "Genre does not exist.", "Error", 0);
                }
            } else {
                JOptionPane.showMessageDialog
                            (null, "No input in textbox", "Message", 0);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e, "Error", 0);
        }
    }//GEN-LAST:event_GenreSearchButtonActionPerformed

    private void MovieSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MovieSearchButtonActionPerformed
        String search = MovieNameTextField.getText();
        String movieReturn;
        boolean wordSearched;

        wordSearched = Pattern.compile("[a-zA-z].*").matcher(search).matches();

        if (wordSearched) {
            out.println("2!" + search);
            int x = 0;

            try {
                movieReturn = in.readLine();
                if (movieReturn.equals("0")) {
                    throw new noMovieException();
                } else {
                    String columnNames[] = {"Movie", "Genre"};
                    String[] genreArray = movieReturn.split("!");
                    Object rows[][] = new Object[(genreArray.length)][2];

                    for (int i = 0; i < genreArray.length; i++) {
                        if (i % 2 == 0) {
                            rows[x][0] = genreArray[i];
                        } else {
                            rows[x][1] = genreArray[i];
                        }

                        if (i % 2 != 0) {
                            x++;
                        }
                    }
                    SearchTable = new JTable(rows, columnNames);
                    SearchScrollPane.getViewport().add(SearchTable);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e, "Error", 0);
            } catch (noMovieException e) {
                JOptionPane.showMessageDialog(null, "No movie found with entered argument.", "Message", 1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Text area is empty!!", "Message", 0);
        }
    }//GEN-LAST:event_MovieSearchButtonActionPerformed
    
    /*
     * This method is used to connect the user to the server and database.
     * This is done via socket connections. Once connected all the options are 
     * available for the user to utilise. The user is also prompted to enter the 
     * server host name or he/she would not be able to enable any of the actions 
     * in the GUI.
     */
    private void ConnectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectJButtonActionPerformed
        String hstName;

        try {
            hstName = JOptionPane.showInputDialog(null, "Enter Hostname", "HostName Request", 1);

            userSocket = new Socket(hstName, 6666);
            out = new PrintWriter(userSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(userSocket.getInputStream()));
            MovieNameTextField.setEnabled(true);
            GenreTextField.setEnabled(true);
            MovieSearchButton.setEnabled(true);
            GenreSearchButton.setEnabled(true);
            DisconnectjButton.setEnabled(true);
            AdminMenuItem.setEnabled(true);
            ConnectJButton.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Welcome", "Success!!", 1);
        } catch (NoRouteToHostException e) {
            JOptionPane.showMessageDialog(null, "Inccorect Hostname entered. \nPlease try again.", "Error", 0);
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "Inccorect Hostname entered. \nPlease try again.", "Error", 0);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "The Server is not running. \nPlease try again.", "Error", 0);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "The Server is not running. \nPlease try again.", "Error", 0);
        }
    }//GEN-LAST:event_ConnectJButtonActionPerformed
    
    /*
     * This method ensures that whe the window is closed an option dialog 
     * box is displayed asking the user if they are sure that they really want 
     * to exit the program, minimize it or cancel the action.
     */  
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        String[] options = {"Minimize", "Cancel", "Exit"};

        int rsp = JOptionPane.showOptionDialog(null, "Are u making the right decision?", "Message", 0,
                JOptionPane.QUESTION_MESSAGE, null, options, options[1]);

        if (rsp == 2) {
            System.exit(1);
        } else if (rsp == 0) {
            this.setState(UserGui.ICONIFIED);
        } else {
            this.setState(UserGui.DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing
    
    /*
     * This method is used to disconnect the user from the server and essentially
     * the database its self.
     */  
    private void DisconnectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectjButtonActionPerformed
        try {
            userSocket.close();
            ConnectJButton.setEnabled(true);
            DisconnectjButton.setEnabled(false);
        } catch (IOException ex) {
            Logger.getLogger(UserGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DisconnectjButtonActionPerformed
    
    /*
     * This method is used to take the user to the admin GUI where he/she can
     * edit the database. The use GUI is also disposed of.
     */ 
    private void AdminMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminMenuItemActionPerformed
        //new AdminGUI().setVisible(true);
        //this.dispose();
    }//GEN-LAST:event_AdminMenuItemActionPerformed

    private void HelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenuItemActionPerformed
        new HelpGui().setVisible(true);
    }//GEN-LAST:event_HelpMenuItemActionPerformed
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new UserGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AdminMenuItem;
    private javax.swing.JMenuItem ClientMenuItem;
    private javax.swing.JButton ConnectJButton;
    private javax.swing.JButton DisconnectjButton;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JLabel GenreLabel;
    private javax.swing.JButton GenreSearchButton;
    private javax.swing.JTextField GenreTextField;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem HelpMenuItem;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel MovieNameLabel;
    private javax.swing.JTextField MovieNameTextField;
    private javax.swing.JButton MovieSearchButton;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JScrollPane SearchScrollPane;
    private javax.swing.JTable SearchTable;
    // End of variables declaration//GEN-END:variables
}

/*
 * Custom exception is created for when a movie being searched cannot be found
 * in the database.
 */
class noMovieException extends Exception {
}

/*
 * Custom exception is created for when a genre being searched cannot be found
 * in the database.
 */
class noGenreException extends Exception {
}
